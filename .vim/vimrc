" ===============================================
" vimrc script applicable to TUI Neovim
"
" Jed, syjung6967@gmail.com.
"
" SPDX-License-Identifier: ISC
" ===============================================
"
" This vimrc script uses as few plugins as possible to avoid relying on them.
"
" Plugins which this vimrc script uses:
" - version control system (VCS) diffs: vim-signify
" - git wrapper: vim-fugitive
" - hint mode: vim-easymotion
" - language client: ALE / CoC
" - AI tool: Github Copilot / Windsurf
"
" Plugins which this vimrc script does NOT use:
" - Community-driven Vim: Neovim GUIs (e.g. Neovide) / MacVim
"   TUI lover does not need extra features of them.
" - Pre-configured setup: SpaceVim, LazyVim, AstroNvim
"   They are friendly to non-vimer due to modularity but they harm Vim's
"   nature behaviors too much. (yet another IDE)
" - Plugin manager: vim-plug / Pathogen / Vundle / Dein
"   Manage your plugins as nested repositories (e.g., submodules for git).
"   Then use `git submodule update --remote --merge` for updating plugins.
" - File system explorer: NERDTree
"   Use netrw for simple job or GUI explorer for complicated jobs.
" - Glyphs for developer: vim-devicons / lspkind.nvim
"   The icons are confusing to understand.
" - Rich status line and tab line: vim-airline / lightline.vim / vim-flagship
"   Maybe necessary if you use multiple status lines and tab lines.
" - Fuzzy finder: fzf / ctrlp
"   Use :e **/<file> for files and :grep <pattern> <file> for contents.
"   See cfilter plugin for more usage.
" - Review tool: Diffview
"   Use vim's diff mode by running external merge tool (e.g., `git mergetool`).
"
" References:
" Neovim help pages
"   https://neovim.io/doc/user/ (For vim, https://vimhelp.org/)
" Neovim features which changed from Vim
"   https://neovim.io/doc/user/vim_diff.html
"
" Cheat sheet for search and replace
"   https://vim.fandom.com/wiki/Search_and_replace
" Magic characters
"   https://vimdoc.sourceforge.net/htmldoc/change.html#:s%
"
" vi Command Help Guide
"   https://www.jeffw.com/vi/vi_help.txt
" POSIX specification for vi
"   https://pubs.opengroup.org/onlinepubs/9699919799/utilities/vi.html
" POSIX specification for ex
"   https://pubs.opengroup.org/onlinepubs/9699919799/utilities/ex.html
" ANSI Escape Sequences
"   https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797

"
" --- simple (but powerful) commands -------------------------------------------
"
" gc " Toggle comments.
" <C-V> $ A <modifiy sth> <Esc> " Add text within visual block on the end of lines.
" . " Repeat last change, with count replaced with [count].
" @: " Repeat last command-line [count] times.
"
" :echomsg / :messages " eval expression and print the result.
" :...<C-B> / :...<C-E> " Move cursor to frontmost / backmost.
"
" Jump to diffs
" [c / ]c " Jump to previous / next start of a change.
"
" Text object selection
" diw / yiw " Delete / Yank inner word.
" daW / yaW " Delete / Yank a word.
" diB / yiB " Delete / Yank inner {} block.
" daB / yaB " Delete / Yank a {} block.
"
" :tab {cmd} " Execute {cmd} in new tab.
" :tabc " close the current tab.
" :Le / :Te " Open netrw directory browser in left / new tab.
"
" Folding
" zf / zd " Create / Delete a fold.
" zE " Delete all folds.
" zo / zc " Open / Close a fold.
" zR / zM " Open / Close all folds.
"
" 'jump' list (cursor position list)
" :ju " List jumps.
" :cle " Clear jumps.
" <C-O> / <C-I> or <Tab> " Go to [count] older / newer cursor position in jump list.
"
" 'quickfix' and 'location' lists
" :Ggrep / Glgrep " Remember result for `git grep` in quickfix list / location list.
" :cw / :lw " Open quickfix list / location list if result exists.
" :ccl / :lcl " Close quickfix list / location list.
" :cc / :ll " Display match for current cursor on the current buffer selected by quickfix list / location list.
" :cbe / :lbe " Display match before current cursor on the current buffer selected by quickfix list / location list.
" :caf / :laf " Display match after current cursor on the current buffer selected by quickfix list / location list.
" :cnf / :lnf " Display first match from the next file of file selected by quickfix list / location list.
" :cNf / :lNf " Display last match from the previous file of file selected by quickfix list / location list.
" :cdo {cmd} / :ldo {cmd} " Execute {cmd} in each valid entry in the quickfix list / location list.
"                         " e.g., :cdo s/old/new/g | w
" :cfdo {cmd} / :lfdo {cmd} " Execute {cmd} in each file in the quickfix list / location list.
" :cold [n] / :lold [n] " Go to older quickfix list / location list.
" :cnew [n] / :lnew [n] " Go to newer quickfix list / location list.
" :[n]chi / [n]lhi " Show the list of quickfix list / location list.
"                  " Select n'th quickfix lists / location list as the current list.
"
" 'buffer' list
" :ls " List buffers.
" :tabe +<N>buf " Open N-th buffer in new tab.
" :tabe # " Undo last accessed tab.
" :%bdel | e# " Clear all buffers except for the buffer opened at current tab.
"
" Miscellaneous
" - Case-insensitive match for grep: add '\c' to pattern anywhere.
" - <C-L> " <Cmd>nohlsearch|diffupdate|normal! <C-L><CR>
" - Neovim embeds and enables editorconfig features by default.
"   .editorconfig file helps coding styles among various developers and IDEs.
"   (see https://editorconfig.org/)

" If Vim is running, exit Vim with a message left.
if !has('nvim')
  echo "Run Neovim instead."
  exit
endif

"
" --- autocommands -------------------------------------------------------------
"

" Restore all cursor positions in previous editing session.
" (restore-cursor from usr_05.txt)
augroup RestoreCursor
  autocmd!
  autocmd BufReadPre * autocmd FileType <buffer> ++once
    \ let s:line = line("'\"")
    \ | if s:line >= 1 && s:line <= line("$") && &filetype !~# 'commit'
    \      && index(['xxd', 'gitrebase'], &filetype) == -1
    \ |   execute "normal! g`\""
    \ | endif
augroup END

"
" --- color scheme -------------------------------------------------------------
"

" Enable highlighting cursor line and screen column.
set cursorline cursorlineopt=both
set cursorcolumn

" Enable highlighting additional screen columns.
"set colorcolumn=81
"set lines=40 columns=125 " This setting occurs bug on PowerShell.

" Load color scheme.
" Screenshots: https://github.com/vim/colorschemes/wiki/Remake-sampler-%E2%80%94-256-colors
"colorscheme evening
colorscheme desert

"
" --- format -------------------------------------------------------------------
"

set fileformats=unix,dos,mac " supported formats

" Preserve eol setting for each file.
"
" Editors have different setting for eol character ('\n')
" By defaults Vim adds eol but VS Code does not.
" Do not check this annoying POSIX conformance.
"
" See also: https://thoughtbot.com/blog/no-newline-at-end-of-file
set nofixendofline

"
" --- files --------------------------------------------------------------------
"

" Disable swap.
set noswapfile

" Enable backup.
set backup backupdir=~/.vim/backup,.
autocmd BufWritePre *
\   let &backupext = '-' .. strftime("%F_%T") .. '~' "multiple versions

" Enable persistent undo until poweroff.
set undofile undodir=/tmp

" Disable autoread/write.
set noautoread noautowrite

"
" --- layout -------------------------------------------------------------------
"

" Set locale.
"
" POSIX behaves unexpectedly.
" For example, copying unicode characters using "+y does not work.
language en_US.UTF-8

" Set line numbers.
set number relativenumber numberwidth=8

" keep N lines off the edges.
set scrolloff=5

" Draw the fold column.
set foldcolumn=1

" Set the title of the window to the value of 'titlestring'.
set title

" Set popup menu size.
set pumwidth=30 pumheight=0

" Configure status line.
set statusline+=%F " Full path to file name (%F), file name only (%t)
set statusline+=%m " modified flag
set statusline+=\ [%{len(&fileencoding)?&fileencoding.',':''}
set statusline+=%{&fileformat}]
set statusline+=\ [%{len(&filetype)?&filetype:'none'}]
set statusline+=\ %r " read only flag

set statusline+=%= " left/right separator

set statusline+=\ %{&expandtab?'SPC':'TAB'} " indentation style
set statusline+=\ %{&tabstop}SPC " tab spacing

set statusline+=\ %10(%l:%v%) " cursor line:column position
set statusline+=\ [%P] " percent through file (always 3 in length)
set statusline+=\ â‰¡
set statusline+=\ %LL\ %{wordcount().words}W " total lines and words in the current buffer

" Change the style for hit-enter prompts caused by file messages.
" - a: shorten buffer related info.
" - T: truncate message in the mid if it is too long to fit on the command line.
" - I: don't give the intro message when starting Vim |:intro|.
" - c: don't give |ins-completion-menu| messages.
set shortmess=aTIc

" Always show tab.
" - <n>gt: go to <n>-th tab.
" - g<Tab>: go to last accessed tab.
" - :tabs: List the tab pages and the windows they contain.
set showtabline=2

" Set number of screen lines to use for the command-line.
" This keeps message from being truncated.
set cmdheight=3

" Set netrw directory browser.
let g:netrw_liststyle=3 " tree style listing
"vertical resize 30
let g:netrw_winsize=-35 " initial size of new windows
let g:netrw_banner=0 " disable banner

"
" --- mapping ------------------------------------------------------------------
"
" FAQ:
"
" 1. How can capture <S-Tab>, <C-Space> in insert mode?
"     Insert <C-V> {your key} to check the key combination you want to capture.
"     For example, <Up> is mapped to OA so the key combination is <Esc>OA.
"     Key combination captured by terminal emulator is unable to use.
"     For example, <C-Tab> is used to switch tab managed by terminal emulator.
"
"     In detail, VIM considers code position for <C-{c}> as char2nr({c})-0x40.
"     Thus if its value is less than 0x40 it cannot be represented in VIM.
"
" 2. Command key (<D-...>) does not work!
"     Command key only works on MacVim.

" Save the current session to ~/sessions directory.
nmap <F2> :execute "mksession! " .. v:this_session<CR>:source ~/sessions/

" Copy text to clipboard in visual mode.
"vnoremap <silent> <Leader>c "+y
vnoremap <silent> <C-C> "+y

"
" --- mechanics ----------------------------------------------------------------
"

set nofoldenable
set list listchars=tab:â”Š\ ,trail:Â·,extends:Â»

" Set threshold for reporting number of lines changed.
set report=0

" Set indentation style.
set noexpandtab " TAB (with 'no'); SPACE (without 'no')
set nosmarttab
set tabstop=8 " Number of spaces that a <Tab> in the file counts for.
set shiftwidth=0 " Use the same value as &tabstop

" Set options to work <Leader> works intended.
set notimeout ttimeout

" Enable command completion.
set wildmenu wildmode=list:longest wildoptions=pum,tagfile

" Enable filetype plugins.
filetype plugin indent on

" Set completion option.
set completeopt=menuone,popup,noinsert

" Add match pairs. (Same character pair is not allowed, e.g., `:`)
set matchpairs+=<:>

" Do not influence to words typed before entering insert mode.
set backspace=""

" Change current working directory to where accessed file is located.
" Note: When this option is on some plugins may not work.
set autochdir

"
" --- hint mode ----------------------------------------------------------------
"

" Move to character.
"
" WARN: DO NOT override 'f', 'F' motion commands because original behavior
" conflicts when repeating the commands.
"map <Leader>f <Plug>(easymotion-bd-f)
"nmap <Leader>f <Plug>(easymotion-overwin-f)
map <Leader>F <Plug>(easymotion-bd-f)
nmap <Leader>F <Plug>(easymotion-overwin-f)

" Move to word.
map <Leader>W <Plug>(easymotion-bd-w)
nmap <Leader>W <Plug>(easymotion-overwin-w)

"
" --- language server protocol (LSP) support -----------------------------------
"
" LSP consists of 3 major components:
"
" - linter: find errors and warnings via static code analysis
"   (the term linter includes formatter in general)
" - autocomplete: get symbol candidates for current input context
" - symbol search: find locations where symbol is defined, referenced,
"   implemented, etc.
"
" Weak points for ALE:
"
" - autocomplete due to using traditional vim feature (omnifunc)
" - location preview when symbol search (e.g., file:|61 col 32| (no contents))
"
" Weak points for CoC:
"
" - support for external formatter (e.g., gofmt, forge are not supported)
"
" Exuberant Ctags (e-ctags) and its successor Universal Ctags (u-ctags) support
" modern languages but the rise of LSP has made ctags less powerful.
"
" - ctags lacks supports of reference tags and implementation tags.
" - ctags follows wrong tags for projects using multiple langauges.
" - ctags creates tags only for local projects so tags for external projects
"   must be created by manually. Also if the project version is changed
"   re-tagging is required by manually. (vim-gutentags plugin supports this)
"
" Language clients using LSP support functions compatible to tagfunc option
" but they do not stack reference tags and implementation tags.
" This is because jumping to the tags is inconsistent behavior in vim context.
" (https://github.com/neovim/neovim/issues/16610)
"
" Fortunately tag stack can be modifiable by using settagstack() so the tags
" can also be stacked without tagfunc option.

" ALE (fixer)
source $HOME/.vim/ale-fixer-only.vim

" CoC (linter & completion)
let g:coc_global_extensions = [
\ 'coc-tsserver',
\ 'coc-json',
\ 'coc-sh',
\ 'coc-go',
\ 'coc-rust-analyzer',
\ 'coc-vimlsp',
\ 'coc-toml',
\ '@nomicfoundation/coc-solidity',
\ ]
source $HOME/.vim/coc.vim

"
" --- Github Copilot -----------------------------------------------------------
"

" Default key bindings:
" <M-]> " <Plug>(copilot-next)
" <M-[> " <Plug>(copilot-previous)
" <M-Bslash> " <Plug>(copilot-suggest)
" <M-Right> " <Plug>(copilot-accept-word)
" <M-C-Right> " <Plug>(copilot-accept-line)

" Remap the default key binding <Tab> to <C-J>.
" <Tab> is more used for indentation than completion.
" <C-J> is rarely used for line feed.
let g:copilot_no_tab_map = v:true
"imap <silent><script><expr> <C-J> copilot#Accept("\<CR>")

"
" --- Windsurf -----------------------------------------------------------------
"
" Default key bindings:
" <C-]> " clear current suggestion.
" <M-]> " next suggestion.
" <M-[> " previous suggestion.
" <Tab> " insert current suggestion.
" <C-K> " accept word from suggestion.
" <C-L> " accept line from suggestion.

"
" --- vim debug ----------------------------------------------------------------
"
" To find out what patterns are consuming most time, get an overview
" with this sequence:
":syntime on
"[ redraw the text at least once with CTRL-L ]
":syntime report

"
" --- PLUGIN -------------------------------------------------------------------
"
" Put this section at the very end of vimrc file.
" Plugins can be located at ~/.vim/pack/git-plugins/start.
" For example, install git plugin (fu"git"ive):
"   git clone https://tpope.io/vim/fugitive.git ~/.vim/pack/git-plugins/start/fugitive
"

" Enable built-in cfilter plugin. (vim9script)
" :Cfilter <pattern> / :Lfilter <pattern> " Filter quickfix list / location list.
"
" Also, these commands may help you to navigate.
" :cold [n] / :lold [n]
" :cnew [n] / :lnew [n]
" :[n]chi / [n]lhi
packadd! cfilter

" Enable optional built-in justify plugin.
" function Justify( [ textwidth [, maxspaces [, indent] ] ] )
"   textwidth: the maximum width of line that is being inserted.
"   maxspaces: the longest spaces allowed. (if exceeds, the line intact)
"   indent: how a line should be indented.
" _j " Align using at most 4 spaces in a space run and keeping current indentation.
" ,gq " Remove space runs and format lines
packadd! justify

" Enable optional built-in matchit plugin.
"
" This plugin extends % motion which breaks original behavior.
packadd! matchit
"let g:loaded_matchit = 1

" Enable built-in nohlsearch plugin.
"
" Turn off hlsearch after:
" - Doing nothing for 'updatetime'
" - Getting into insert mode
"packadd! nohlsearch

" Enable optional built-in shellmenu plugin.
"
" Menus for editing shell scripts in the GUI version.
"packadd! shellmenu

" Enable optional built-in swapmouse plugin.
"
" Swap left and right mouse buttons.
"packadd! swapmouse

" Enable built-in termdebug plugin. (vim9script)
"
" Debugger plugin using gdb.
"packadd! termdebug

" Load all plugins preceded by loading all of the helptags.
" All messages and errors will be ignored during loading.
packloadall | silent! helptags ALL
